# Generated by Django 4.2.19 on 2025-05-06 06:48

from django.db import connection, migrations, models
from django.db.models import Count

import qfieldcloud.core.models
import qfieldcloud.core.validators


def set_file_storage_for_files(apps, schema_editor):
    # update File's file_storage value to the parent Project one.
    with connection.cursor() as cursor:
        cursor.execute(
            """
            UPDATE filestorage_file ff
            SET
                file_storage = cp.file_storage
            FROM core_project cp
                WHERE cp.id = ff.project_id
        """
        )


def revert_file_storage_for_files(apps, schema_editor):
    File = apps.get_model("filestorage", "File")

    # check that there is only max one different storage for all a project's files.
    if (
        File.objects.values("project_id")
        .annotate(file_storage_count=Count("file_storage", distinct=True))
        .filter(file_storage_count__gt=1)
        .exists()
    ):
        raise Exception(
            "Can not revert migration: there are more than one different file_storage for files of a same project!"
        )


class Migration(migrations.Migration):
    dependencies = [
        ("filestorage", "0001_initial"),
        ("core", "0082_project_attachments_file_storage"),
    ]

    operations = [
        migrations.AddField(
            model_name="file",
            name="file_storage",
            field=models.CharField(
                default=qfieldcloud.core.models.get_project_file_storage_default,
                editable=False,
                help_text="Which file storage provider should be used for storing the file.",
                max_length=100,
                validators=[qfieldcloud.core.validators.file_storage_name_validator],
                verbose_name="File storage",
            ),
        ),
        migrations.RunPython(set_file_storage_for_files, revert_file_storage_for_files),
    ]
