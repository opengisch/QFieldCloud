map "$time_iso8601 # $msec" $time_iso8601_ms {
  "~([^+]+)\+([\d:]+?) # \d+?\.(\d+)" "$1.$3+$2";
}

log_format json-logger escape=json
'{'
  '"ts":"$time_iso8601_ms",'
  '"ip":"$remote_addr",'
  '"method":"$request_method",'
  '"status":$status,'
  '"resp_time":$request_time,'
  '"request_length":$request_length,'
  '"resp_body_size":$body_bytes_sent,'
  '"uri":"$request_uri",'
  '"connection": "$connection",'
  '"connection_requests": "$connection_requests",'
  '"user_agent":"$http_user_agent",'
  '"host":"$http_host",'
  '"user":"$remote_user",'
  '"upstream_addr":"$upstream_addr",'
  '"upstream_connect_time":"$upstream_connect_time",'
  '"upstream_header_time":"$upstream_header_time",'
  '"upstream_response_time":"$upstream_response_time",'
  '"request_id":"$request_id",'
  '"source":"nginx"'
'}';

upstream django {
  # Defines a shared memory zone between worker processes, necessary dynamic dns resolving
  zone django 64k;

  # Add Docker's DNS resolver with a short TTL and IPv6 turned off
  resolver 127.0.0.11 valid=1s ipv6=off;

  # the number of keepalive connections comes from the number Django workers we have
  keepalive 32;

  # Use Docker DNS resolution to dynamically resolve the app backend hostname
  # `max_fails=1` and `fail_timeout=1s` ensures Nginx retries on almost every request from `loading.html`
  server app:8000 max_fails=1 fail_timeout=1s resolve;
}

server {
  listen 80;
  server_name ${QFIELDCLOUD_HOST};

  # cerbot
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # prevent access by IP
  if ($http_host !~ "${QFIELDCLOUD_HOST}(:${WEB_HTTP_PORT})?") {
    return 444;
  }

  # use $WEB_HTTPS_PORT in the configuration, since it might be different from 443 (e.g. localhost)
  location / {
    return 302 https://$host:${WEB_HTTPS_PORT}$request_uri;
  }
}

server {
  listen 443 ssl;

  ssl_certificate     ${QFIELDCLOUD_TLS_CERT};
  ssl_certificate_key ${QFIELDCLOUD_TLS_KEY};

  ssl_dhparam ${QFIELDCLOUD_TLS_DHPARAMS};
  include /etc/nginx/options-ssl-nginx.conf;

  access_log /var/log/nginx/access.log json-logger;
  error_log /var/log/nginx/error.log ${NGINX_ERROR_LOG_LEVEL};

  server_name ${QFIELDCLOUD_HOST} nginx;
  client_max_body_size 10G;
  keepalive_timeout 5;

  # path for static files (only needed for serving local staticfiles)
  root /var/www/html/;

  # upgrade to https
  error_page 497 https://$host:${WEB_HTTPS_PORT}$request_uri;

  # prevent access by IP
  if ($http_host !~ "${QFIELDCLOUD_HOST}(:${WEB_HTTPS_PORT})?") {
    return 444;
  }

  # include additional config from the current QFieldCloud instance. This is different from the default `conf.d` directory.
  include config.d/*.conf;

  # deny annoying bot
  deny 34.215.13.216;

  # checks for static file, if not found proxy to app
  location / {
    try_files $uri @proxy_to_app;
  }

  location /swagger.yaml {
    add_header Access-Control-Allow-Origin https://docs.qfield.org;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;

    proxy_read_timeout 300;
    proxy_send_timeout 300;

    proxy_redirect off;
    proxy_pass http://django;
  }

  location @proxy_to_app {
    # Required when keepalive is used
    proxy_http_version 1.1;

    proxy_set_header Connection '';
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Request-Id $request_id;
    proxy_set_header Host $http_host;

    # Proxy settings
    proxy_connect_timeout 5s;
    proxy_read_timeout 300;
    proxy_send_timeout 300;
    proxy_redirect off;

    proxy_intercept_errors on;

    # Error handling:
    error_page 403 =403 /pages/403.html;
    error_page 404 =404 /pages/404.html;

    # Initial loading page for upstream issues (502, 503, 504 for timeouts)
    error_page 502 503 504 =503 /pages/loading.html;

    # For 500, 501, 505 - these are actual errors, not the initial "loading" state.
    error_page 500 501 505 =500 /pages/500.html;

    # Pass to upstream
    proxy_pass http://django;
  }

  location /storage-download/ {
    # Only allow internal redirects
    internal;

    # used for redirecting file requests to storage.
    set $redirect_uri "$upstream_http_redirect_uri";
    # webdav storage requires a HTTP auth (Basic, mostly).
    set $webdav_auth "$upstream_http_webdav_auth";
    # if a Range header is provided
    set $file_range "$upstream_http_file_range";

    # required DNS
    resolver 8.8.8.8 ipv6=off;

    # Stops the local disk from being written to (just forwards data through)
    proxy_max_temp_file_size 0;
    proxy_buffering off;

    # Required when keepalive is used
    proxy_http_version 1.1;

    # does not work with S3 otherwise
    proxy_ssl_server_name on;

    # remove the authorization and the cookie headers
    proxy_set_header Connection '';
    proxy_set_header Authorization $webdav_auth;
    proxy_set_header Cookie '';
    proxy_set_header Content-Type '';
    proxy_set_header Accept-Encoding '';
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Range $file_range;

    # hide Object Storage related headers
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Expose-Headers;
    proxy_hide_header X-Amz-Meta-Sha256sum;
    proxy_hide_header X-Amz-Req-Time-Micros;
    proxy_hide_header X-Amz-Request-Id;
    proxy_hide_header A-Amz-Meta-Server-Side-Encryption;
    proxy_hide_header X-Amz-Storage-Class;
    proxy_hide_header X-Amz-Version-Id;
    proxy_hide_header X-Amz-Id-2;
    proxy_hide_header X-Amz-Server-Side-Encryption;
    proxy_hide_header Set-Cookie;
    proxy_ignore_headers Set-Cookie;

    proxy_intercept_errors on;

    proxy_pass $redirect_uri;
    error_page 404 =404 /pages/404.html;
    error_page 403 =403 /pages/403.html;
    error_page 401 402 405 406 407 408 409 410 411 412 413 414 415 416 417 500 501 502 503 504 505 =500 /pages/500.html;
  }

}
