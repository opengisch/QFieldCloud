version: '3.9'

services:

  app:
    build:
      args:
        - DEBUG_BUILD=1
    ports:
      # allow direct access without nginx
      - ${DJANGO_DEV_PORT}:8000
      - ${DEBUG_DEBUGPY_APP_PORT:-5678}:5678
    volumes:
      # mount the source for live reload
      - ./docker-app/qfieldcloud:/usr/src/app/qfieldcloud
    environment:
      DEBUG: 1
    command: python3 -m debugpy --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000
    depends_on:
      - db
      - redis

  worker_wrapper:
    scale: ${QFIELDCLOUD_WORKER_REPLICAS}
    build:
      args:
        - DEBUG_BUILD=1
    ports:
      - ${DEBUG_DEBUGPY_WORKER_WRAPPER_PORT:-5679}:5679
    volumes:
      # mount the source for live reload
      - ./docker-app/qfieldcloud:/usr/src/app/qfieldcloud
      - ./docker-app/worker_wrapper:/usr/src/app/worker_wrapper
    command: python3 -m debugpy --listen 0.0.0.0:5679 manage.py dequeue

  smtp4dev:
    image: rnwood/smtp4dev:v3
    restart: always
    ports:
      # Web interface
      - ${SMTP4DEV_WEB_PORT}:80
      # SMTP server
      - ${SMTP4DEV_SMTP_PORT}:25
      # IMAP
      - ${SMTP4DEV_IMAP_PORT}:143
    volumes:
        - smtp4dev_data:/smtp4dev
    environment:
      # Specifies the server hostname. Used in auto-generated TLS certificate if enabled.
      - ServerOptions__HostName=smtp4dev

  db:
    image: postgis/postgis:13-3.1-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - ${HOST_POSTGRES_PORT}:5432
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]

  redis:
    ports:
      - "${REDIS_PORT}:6379"

  memcached:
    ports:
      - "${MEMCACHED_PORT}:11211"

  geodb:
    image: postgis/postgis:12-3.0
    restart: unless-stopped
    volumes:
      - geodb_data:/var/lib/postgresql
    environment:
      POSTGRES_DB: ${GEODB_DB}
      POSTGRES_USER: ${GEODB_USER}
      POSTGRES_PASSWORD: ${GEODB_PASSWORD}
    ports:
      - ${GEODB_PORT}:5432

  minio:
    image: minio/minio:RELEASE.2023-04-07T05-28-58Z
    restart: unless-stopped
    volumes:
      - minio_data1:/data1
      - minio_data2:/data2
      - minio_data3:/data3
      - minio_data4:/data4
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_ACCESS_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://${QFIELDCLOUD_HOST}:${MINIO_BROWSER_PORT}
    command: server /data{1...4} --console-address :9001
    healthcheck:
        test: [
          "CMD",
          "curl",
          "-A",
          "Mozilla/5.0 (X11; Linux x86_64; rv:30.0) Gecko/20100101 Firefox/30.0",
          "-f",
          "${STORAGE_ENDPOINT_URL}/minio/index.html"
        ]
        interval: 5s
        timeout: 20s
        retries: 5
    ports:
      - ${MINIO_BROWSER_PORT}:9001
      - ${MINIO_API_PORT}:9000

  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio ${STORAGE_ENDPOINT_URL} ${STORAGE_ACCESS_KEY_ID} ${STORAGE_SECRET_ACCESS_KEY};
      /usr/bin/mc mb myminio/${STORAGE_BUCKET_NAME};
      /usr/bin/mc policy set download myminio/${STORAGE_BUCKET_NAME}/users;
      /usr/bin/mc version enable myminio/${STORAGE_BUCKET_NAME};
      exit 0;
      "

  qgis:
    build:
      target: dev
#    volumes:
# Uncomment to use a local libqfieldsync dev environment
#      - /home/user/dev/libqfieldsync:/libqfieldsync

volumes:
  postgres_data:
  geodb_data:
  smtp4dev_data:
  minio_data1:
  minio_data2:
  minio_data3:
  minio_data4:
